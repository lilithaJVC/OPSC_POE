name: Android CI

on:
  push:
    branches:
      - lilitha
  pull_request:
    branches:
      - lilitha

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          build-tools: 30.0.3

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Start AVD (Android Virtual Device) with retry
        run: |
          sudo apt-get install -y qemu-kvm
          $ANDROID_SDK_ROOT/emulator/emulator -avd test -no-window -no-audio &
          for i in {1..3}; do
            adb wait-for-device shell getprop init.svc.bootanim | grep -q 'stopped' && break
            echo "AVD did not start, retrying..."
            adb kill-server
            $ANDROID_SDK_ROOT/emulator/emulator -avd test -no-window -no-audio &
            sleep 10
          done
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Unlock AVD screen
        run: |
          adb wait-for-device
          adb shell input keyevent 82

      - name: Run Android Instrumented Tests
        run: ./gradlew connectedAndroidTest

      # Set up and Run SonarQube Analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v1.0.0
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Optional CircleCI trigger
  trigger_circleci:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Trigger CircleCI Workflow
        run: |
          curl -u ${CIRCLECI_TOKEN}: \
               -d build_parameters[CIRCLE_JOB]=build \
               https://circleci.com/api/v1.1/project/github/LilithaJVC/OPSC_POE/build
        env:
          CIRCLECI_TOKEN: ${{ secrets.CIRCLECI_TOKEN }}
